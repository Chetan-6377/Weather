{"version":3,"sources":["GoogleMaps.js","Card.js","Forecast.js","Weather.js","App.js","reportWebVitals.js","index.js"],"names":["containerStyle","width","height","MyComponent","useState","lat","setLat","long","setLong","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","center","lng","useJsApiLoader","id","googleMapsApiKey","isLoaded","className","mapContainerStyle","zoom","React","memo","Card","weatherData","WeatherIcon","styled","div","weatherIcon","weather","main","icon","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","name","Button","inverted","color","circular","onClick","window","location","reload","moment","format","style","fontSize","marginTop","temp","humidity","Date","sys","sunrise","toLocaleTimeString","sunset","Forecast","props","forecast","console","log","results","map","item","index","description","dt_txt","temperature","List","Weather","setWeatherData","setForecast","getForecast","fetch","then","res","json","forecastData","Object","entries","length","list","filter","match","mapDataToWeatherInterface","data","mapped","date","dt","Math","round","fetchData","a","catch","err","result","App","GoogleMaps","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd49a3b5.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { GoogleMap, useJsApiLoader, Marker } from '@react-google-maps/api';\r\n\r\nconst containerStyle = {\r\n    width: '100%',\r\n    height: '500px'\r\n};\r\n\r\nfunction MyComponent() {\r\n    const [lat, setLat] = useState([]);\r\n    const [long, setLong] = useState([]);\r\n\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(function (position) {\r\n            setLat(position.coords.latitude);\r\n            setLong(position.coords.longitude);\r\n        });\r\n\r\n        // console.log(\"Latitude is:\", lat)\r\n        // console.log(\"Longitude is:\", long)\r\n    }, [lat, long]);\r\n\r\n    const center = {\r\n        lat:+ lat,\r\n        lng: +long\r\n    };\r\n\r\n    const { isLoaded } = useJsApiLoader({\r\n        id: 'google-map-script',\r\n        googleMapsApiKey: \"AIzaSyAZSDjQGRLzyHt90brGMVLQ8Ggs6ZVRonA\"\r\n    })\r\n    return isLoaded ? (\r\n        <div className=\"map \">\r\n            <GoogleMap\r\n                mapContainerStyle={containerStyle}\r\n                center={center}\r\n                zoom={10}\r\n            >\r\n\r\n                <Marker key=\"marker_1\"\r\n\r\n                    position={center}\r\n                />\r\n                <></>\r\n            </GoogleMap>\r\n        </div>\r\n    ) : <></>\r\n}\r\n\r\nexport default React.memo(MyComponent)","import React from 'react';\r\nimport './style.css';\r\nimport moment from 'moment';\r\nimport { Button } from 'semantic-ui-react';\r\nimport {\r\n  faCloud,\r\n  faBolt,\r\n  faCloudRain,\r\n  faCloudShowersHeavy,\r\n  faSnowflake,\r\n  faSun,\r\n  faSmog,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport default function Card({ weatherData }) {\r\n\r\n  const WeatherIcon = styled.div`\r\n  color: whitesmoke;\r\n`;\r\n\r\n  const refresh = () => {\r\n    window.location.reload();\r\n  }\r\n\r\n  let weatherIcon = null;\r\n\r\n  if (weatherData.weather[0].main === 'Thunderstorm') {\r\n    weatherIcon = <FontAwesomeIcon icon={faBolt} />;\r\n  } else if (weatherData.weather[0].main === 'Drizzle') {\r\n    weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\r\n  } else if (weatherData.weather[0].main === 'Rain') {\r\n    weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\r\n  } else if (weatherData.weather[0].main === 'Snow') {\r\n    weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\r\n  } else if (weatherData.weather[0].main === 'Clear') {\r\n    weatherIcon = <FontAwesomeIcon icon={faSun} />;\r\n  } else if (weatherData.weather[0].main === 'Clouds') {\r\n    weatherIcon = <FontAwesomeIcon icon={faCloud} />;\r\n  } else {\r\n    weatherIcon = <FontAwesomeIcon icon={faSmog} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"main \">\r\n      <div className=\"top\">\r\n        <p className=\"header\">{weatherData.name}</p>\r\n        <Button className=\"button\" inverted color='blue' circular icon='refresh' onClick={refresh} />\r\n      </div>\r\n      <div className=\"flex\">\r\n        <p className=\"day\">{moment().format('dddd')}, <span>{moment().format('LLL')}</span></p>\r\n        <div className=\"flex\">\r\n          <WeatherIcon style={{ fontSize: 30, marginTop: 15}}>{weatherIcon}</WeatherIcon>\r\n          <p className=\"description\">{weatherData.weather[0].main}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex\">\r\n        <p className=\"temp\">Temprature: {weatherData.main.temp} &deg;F</p>\r\n        <p className=\"temp\">Humidity: {weatherData.main.humidity} %</p>\r\n      </div>\r\n\r\n      <div className=\"flex\">\r\n        <p className=\"sunrise-sunset\">Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-IN')}</p>\r\n        <p className=\"sunrise-sunset\">Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN')}</p>\r\n      </div>\r\n      \r\n\r\n\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport {\r\n    List\r\n} from \"@material-ui/core\";\r\nimport moment from 'moment';\r\n// import './styles.css';\r\nimport {\r\n    faCloud,\r\n    faBolt,\r\n    faCloudRain,\r\n    faCloudShowersHeavy,\r\n    faSnowflake,\r\n    faSun,\r\n    faSmog,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nexport default function Forecast(props, { weatherData }) {\r\n\r\n    const WeatherIcon = styled.div`\r\n  color: whitesmoke;\r\n`;\r\n\r\n    const { forecast } = props;\r\n\r\n    console.log(\"Forecast\", forecast);\r\n\r\n    const results = forecast.map((item, index) => {\r\n\r\n        let weatherIcon = null;\r\n\r\n        if (item.description === 'Thunderstorm') {\r\n            weatherIcon = <FontAwesomeIcon icon={faBolt} />;\r\n        } else if (item.description === 'Drizzle') {\r\n            weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\r\n        } else if (item.description === 'Rain') {\r\n            weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\r\n        } else if (item.description === 'Snow') {\r\n            weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\r\n        } else if (item.description === 'Clear') {\r\n            weatherIcon = <FontAwesomeIcon icon={faSun} />;\r\n        } else if (item.description === 'Clouds') {\r\n            weatherIcon = <FontAwesomeIcon icon={faCloud} />;\r\n        } else {\r\n            weatherIcon = <FontAwesomeIcon icon={faSmog} />;\r\n        }\r\n\r\n        return (\r\n            <div key={index} className=\"forecast\">\r\n                <div className=\"flex-forecast\">\r\n                    <p>{moment(item.dt_txt).format(\"dddd\")}</p>\r\n\r\n                    <WeatherIcon style={{ fontSize: 25, marginTop: 4 }}>{weatherIcon}</WeatherIcon>\r\n\r\n                    <p>\r\n                        {item.temperature} &deg;F\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <List aria-label=\"forecast data\">{results}</List>\r\n        </div>\r\n    );\r\n\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport Card from \"./Card\"\r\nimport Forecast from \"./Forecast\"\r\nexport default function Weather() {\r\n  \r\n  const [lat, setLat] = useState([]);\r\n  const [long, setLong] = useState([]);\r\n  const [weatherData, setWeatherData] = useState([]);\r\n  const [forecast, setForecast] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      navigator.geolocation.getCurrentPosition(function(position) {\r\n        setLat(position.coords.latitude);\r\n        setLong(position.coords.longitude);\r\n      });\r\n\r\n      getForecast(lat, long)\r\n      .then(data => {\r\n        setForecast(data);\r\n        // setError(null);\r\n      })\r\n      .catch(err => {\r\n        // setError(err.message);\r\n      });\r\n\r\n      await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=f0590081a00ab7af9d5a2db817ea04be`)\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        setWeatherData(result)\r\n        console.log(result);\r\n      });\r\n    }\r\n    fetchData();\r\n  }, [lat,long])\r\n\r\n  function getForecast(lat, long) {\r\n    return fetch(\r\n      `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${long}&appid=f0590081a00ab7af9d5a2db817ea04be`\r\n    )\r\n      .then(res => res.json())\r\n      .then(forecastData => {\r\n        if (Object.entries(forecastData).length) {\r\n          return forecastData.list\r\n            .filter(forecast => forecast.dt_txt.match(/09:00:00/))\r\n            .map(mapDataToWeatherInterface);\r\n        }\r\n      });\r\n  }\r\n\r\n  function mapDataToWeatherInterface(data) {\r\n    const mapped = {\r\n      date: data.dt * 1000, // convert from seconds to milliseconds\r\n      description: data.weather[0].main,\r\n      temperature: Math.round(data.main.temp),\r\n    };\r\n  \r\n    // Add extra properties for the five day forecast: dt_txt, icon, min, max\r\n    if (data.dt_txt) {\r\n      mapped.dt_txt = data.dt_txt;\r\n    }\r\n  \r\n    return mapped;\r\n  }\r\n  \r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      {(typeof weatherData.main != 'undefined') ? (\r\n        <div className=\"\">\r\n\r\n        <Card weatherData={weatherData}/>\r\n        <h1>Next Five days forecast :</h1>\r\n        <Forecast forecast={forecast} weatherData={weatherData}/>\r\n        </div>\r\n      ): (\r\n        <div></div>\r\n      )}\r\n      \r\n    </div>\r\n  );\r\n}","import './App.css';\nimport GoogleMaps from './GoogleMaps';\nimport Weather from './Weather'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GoogleMaps />\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}